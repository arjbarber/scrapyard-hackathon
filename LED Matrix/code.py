# SPDX-FileCopyrightText: 2020 Jeff Epler for Adafruit Industries
#
# SPDX-License-Identifier: MIT

import random
import time

import board
import displayio
import framebufferio
import rgbmatrix

displayio.release_displays()

def blind():
    palette[1] = 0xffffff
    conway_data = [
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
        b'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
    ]
    for i in range(b1.height * b1.width):
        b1[i] = 0
    for i, si in enumerate(conway_data):
        y = i
        for j, cj in enumerate(si):
            b1[0//2 + j, y] = cj & 1

matrix = rgbmatrix.RGBMatrix(
    width=64, height=32, bit_depth=1,
    rgb_pins=[board.IO1, board.IO2, board.IO3, board.IO5, board.IO4, board.IO6],
    addr_pins=[board.IO8, board.IO7, board.IO10, board.IO9],
    clock_pin=board.IO12, latch_pin=board.IO11, output_enable_pin=board.IO13)
display = framebufferio.FramebufferDisplay(matrix, auto_refresh=False)
SCALE = 1
b1 = displayio.Bitmap(display.width//SCALE, display.height//SCALE, 2)
b2 = displayio.Bitmap(display.width//SCALE, display.height//SCALE, 2)
palette = displayio.Palette(2)
tg1 = displayio.TileGrid(b1, pixel_shader=palette)
tg2 = displayio.TileGrid(b2, pixel_shader=palette)
g1 = displayio.Group(scale=SCALE)
g1.append(tg1)
display.root_group = g1
g2 = displayio.Group(scale=SCALE)
g2.append(tg2)

display.auto_refresh = True

def activate():
    timer = 0
    while True:
        timer += 1
        blind()
        if timer > 60:
            break